// Generated by CoffeeScript 1.3.3
(function() {
  var Player, Tile, canvasHeight, canvasWidth, currentFile, files, fullHeight, fullWidth, gridIndex, main, map0, mouseSquarex, mouseSquarey, mousex, mousey, numcols, numrows, player, playerMovingDown, playerMovingLeft, playerMovingRight, playerMovingUp, playerspeed, playerx, playery, render, scrollAccConst, scrollRegion, scrollx, scrollxacc, scrollxvel, scrolly, scrollyacc, scrollyvel, then_, tileArray, update, updateScroll, _i, _ref,
    _this = this;

  map0 = [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 4, 0, 0, 0, 0, 2, 1, 4, 4, 4, 2, 0, 0, 0, 0, 2, 2, 4, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 4, 0, 0, 0, 0, 2, 1, 4, 4, 4, 2, 0, 0, 0, 0, 2, 2, 4, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 4, 0, 0, 0, 0, 2, 1, 4, 4, 4, 2, 0, 0, 0, 0, 2, 2, 4, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 2, 2, 2, 2, 2, 4, 0, 0, 0, 0, 2, 1, 4, 4, 4, 2, 0, 0, 0, 0, 2, 2, 4, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 2, 2, 4, 2, 2, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 0, 0, 3, 0, 0, 0, 0, 3, 0, 4, 0, 0];

  numrows = 15;

  numcols = 30;

  canvasWidth = 800;

  canvasHeight = 700;

  fullWidth = 25 * numcols;

  fullHeight = 25 * numrows;

  mousex = 0;

  mousey = 0;

  mouseSquarex = 0;

  mouseSquarey = 0;

  playerx = 0;

  playery = 0;

  playerspeed = 0.8;

  scrollx = 0.0;

  scrollxvel = 0.0;

  scrollxacc = 0.0;

  scrolly = 0.0;

  scrollyvel = 0.0;

  scrollyacc = 0.0;

  scrollRegion = 0.15;

  scrollAccConst = 0.12;

  playerMovingLeft = false;

  playerMovingUp = false;

  playerMovingRight = false;

  playerMovingDown = false;

  gridIndex = function(x, y) {
    return y * numcols + x;
  };

  $(document).ready(function() {
    $('#container').mousemove(function(evt) {
      var offset;
      offset = $(this).offset();
      mousex = Math.floor(evt.pageX - offset.left);
      return mousey = Math.floor(evt.pageY - offset.top);
    });
    $(document.documentElement).keyup(function(evt) {
      if (evt.keyCode === 37) {
        playerMovingLeft = false;
      }
      if (evt.keyCode === 38) {
        playerMovingUp = false;
      }
      if (evt.keyCode === 39) {
        playerMovingRight = false;
      }
      if (evt.keyCode === 40) {
        return playerMovingDown = false;
      }
    });
    return $(document.documentElement).keydown(function(evt) {
      if (evt.keyCode === 37) {
        playerMovingLeft = true;
        playerMovingUp = false;
        playerMovingRight = false;
        playerMovingDown = false;
      }
      if (evt.keyCode === 38) {
        playerMovingUp = true;
        playerMovingLeft = false;
        playerMovingRight = false;
        playerMovingDown = false;
      }
      if (evt.keyCode === 39) {
        playerMovingRight = true;
        playerMovingLeft = false;
        playerMovingUp = false;
        playerMovingDown = false;
      }
      if (evt.keyCode === 40) {
        playerMovingDown = true;
        playerMovingLeft = false;
        playerMovingUp = false;
        return playerMovingRight = false;
      }
    });
  });

  window.onload = function() {
    window.stage = new Kinetic.Stage({
      container: "container",
      width: canvasWidth,
      height: canvasHeight
    });
    window.mapLayer = new Kinetic.Layer();
    window.hoverSelectLayer = new Kinetic.Layer();
    window.hoverSelectBox = new Kinetic.Rect({
      fill: 'yellow',
      width: 25,
      height: 25,
      alpha: 0.6
    });
    window.hoverSelectLayer.add(window.hoverSelectBox);
    window.debugLayer = new Kinetic.Layer();
    window.debugText = new Kinetic.Text({
      x: 10,
      y: 10,
      text: "Simple Text",
      fontSize: 12,
      fontFamily: "Calibri",
      textFill: "green",
      align: "left",
      verticalAlign: "middle"
    });
    window.debugLayer.add(window.debugText);
    window.stage.add(window.mapLayer);
    window.stage.add(window.hoverSelectLayer);
    return window.stage.add(window.debugLayer);
  };

  /*
      Loading resources
  */


  files = ["grass.png", "fire.png", "hill.png", "stone.png", "water.png"];

  Tile = (function() {

    function Tile(src) {
      var _this = this;
      this.tileImage = new Image();
      this.tileImage.onload = function() {
        return _this.tileReady = true;
      };
      this.tileImage.src = src;
    }

    Tile.prototype.tileReady = false;

    return Tile;

  })();

  tileArray = {};

  for (currentFile = _i = 0, _ref = files.length; 0 <= _ref ? _i < _ref : _i > _ref; currentFile = 0 <= _ref ? ++_i : --_i) {
    tileArray[currentFile] = new Tile(files[currentFile]);
  }

  Player = (function() {

    function Player() {
      var _this = this;
      this.playerImage = new Image();
      this.playerImage.onload = function() {
        return _this.imgReady = true;
      };
      this.playerImage.src = "sprite.png";
    }

    Player.prototype.imgReady = false;

    return Player;

  })();

  player = new Player();

  /*
      Drawing to canvas
  */


  render = function() {
    var mapContext, x, y, _j, _k;
    mapContext = window.mapLayer.getContext();
    mapContext.fillStyle = "#000000";
    mapContext.fillRect(0, 0, canvasWidth, canvasHeight);
    for (y = _j = 0; 0 <= numrows ? _j < numrows : _j > numrows; y = 0 <= numrows ? ++_j : --_j) {
      for (x = _k = 0; 0 <= numcols ? _k < numcols : _k > numcols; x = 0 <= numcols ? ++_k : --_k) {
        if (tileArray[map0[gridIndex(x, y)]].tileReady) {
          mapContext.drawImage(tileArray[map0[gridIndex(x, y)]].tileImage, x * 25 - scrollx, y * 25 - scrolly);
        }
      }
    }
    window.hoverSelectLayer.draw();
    if (player.imgReady) {
      mapContext.drawImage(player.playerImage, playerx - scrollx, playery - scrolly);
    }
    if (playerMovingLeft) {
      playerx = playerx - playerspeed;
    } else if (playerMovingRight) {
      playerx = playerx + playerspeed;
    } else {
      playerx = Math.floor((playerx + 12.5) / 25) * 25;
    }
    if (playerMovingUp) {
      playery = playery - playerspeed;
    } else if (playerMovingDown) {
      playery = playery + playerspeed;
    } else {
      playery = Math.floor((playery + 12.5) / 25) * 25;
    }
    window.hoverSelectBox.setX(Math.floor((playerx + 12.5) / 25) * 25 - Math.floor(scrollx));
    window.hoverSelectBox.setY(Math.floor((playery + 12.5) / 25) * 25 - Math.floor(scrolly));
    debugText.setText("playerx = " + playerx + ", playery = " + playery);
    return window.debugLayer.draw();
  };

  /*
      Updating game logic
  */


  update = function(modifier) {
    return updateScroll();
  };

  updateScroll = function() {
    scrollxvel = scrollxvel * 0.92;
    scrollyvel = scrollyvel * 0.92;
    scrollx += scrollxvel;
    scrollxvel += scrollxacc;
    scrolly += scrollyvel;
    scrollyvel += scrollyacc;
    if (canvasWidth < fullWidth) {
      if (scrollx < 0) {
        scrollx = 0;
        scrollxvel = 0;
        scrollxacc = 0;
      } else if (mousex < canvasWidth * scrollRegion) {
        scrollxacc = -scrollAccConst;
      } else if (scrollx > fullWidth - canvasWidth) {
        scrollx = fullWidth - canvasWidth;
        scrollxvel = 0;
        scrollxacc = 0;
      } else if (mousex > canvasWidth * (1 - scrollRegion)) {
        scrollxacc = scrollAccConst;
      } else {
        scrollxacc = 0;
      }
    } else {
      scrollx = -(canvasWidth - fullWidth) / 2;
    }
    if (canvasHeight < fullHeight) {
      if (scrolly < 0) {
        scrolly = 0;
        scrollyvel = 0;
        scrollyacc = 0;
      } else if (mousey < canvasHeight * scrollRegion) {
        scrollyacc = -scrollAccConst;
      } else if (scrolly > fullHeight - canvasHeight) {
        scrolly = fullHeight - canvasHeight;
        scrollyvel = 0;
        scrollyacc = 0;
      } else if (mousey > canvasHeight * (1 - scrollRegion)) {
        scrollyacc = scrollAccConst;
      } else {
        scrollyacc = 0;
      }
    } else {
      scrolly = -(canvasHeight - fullHeight) / 2;
    }
    mouseSquarex = Math.floor(mousex / 25);
    return mouseSquarey = Math.floor(mousey / 25);
  };

  /*
  Main method
  */


  main = function() {
    var delta, now, then_;
    now = Date.now();
    delta = now - then_;
    update(delta / 1000);
    render();
    return then_ = now;
  };

  then_ = Date.now();

  setInterval(main, 1);

}).call(this);
